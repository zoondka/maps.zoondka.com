---
- name: install dependencies
  apt: name={{ item }} update_cache=yes
  with_items:
    - git
    - build-essential
    - proj-bin
    - libgeos-dev
    - osm2pgsql
    - sqlite3
    - nodejs-legacy
    - npm
    - redis-server

## Tilerator ##

- name: "tilerator : download"
  git: repo=https://github.com/kartotherian/tilerator.git dest=/srv/tilerator
  register: src

- name: "tilerator : update submodules"
  when: src.changed
  shell: git submodule update --init chdir=/srv/tilerator

- name: "tilerator : install"
  when: src.changed
  shell: npm install -g --production --no-optional chdir=/srv/tilerator

- name: "tilerator : add user"
  user: name=tilerator createhome=no

- name: "tilerator : copy service files"
  copy: src=tilerator/{{ item }} dest=/etc/systemd/system/
  with_items:
    - tilerator.service
    - tilerator-ui.service
  register: services

- name: "tilerator : make config dir"
  file: path=/etc/tilerator state=directory
  
- name: "tilerator : copy config"
  copy: src=tilerator/{{ item }} dest=/etc/tilerator/
  with_items:
    - config.yaml
    - config.ui.yaml
    - sources.yaml
  register: conf

# psql --- #

- name: "tilerator : add psql user"
  become_user: postgres
  shell: createuser -s tilerator --no-superuser
  ignore_errors: True

- name: "tilerator : add gis database"
  become_user: postgres
  shell: createdb -E UTF8 -T template0 gis
  ignore_errors: True

- name: "tilerator : add hstore & postgis extensions"
  become_user: postgres
  shell: psql -d gis -c 'CREATE EXTENSION hstore; CREATE EXTENSION postgis;'
  ignore_errors: True

- name: "tilerator : grant gis connect privilege to user tilerator"
  become_user: postgres
  shell: psql -d gis -c 'GRANT CONNECT ON DATABASE gis TO tilerator;'

- name: "tilerator : grant gis usage privilege to user tilerator"
  become_user: postgres
  shell: psql -d gis -c 'GRANT USAGE ON SCHEMA public TO tilerator;'

- name: "tilerator : grant gis select privilege to user tilerator"
  become_user: postgres
  shell: psql -d gis -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO tilerator;'

- name: "tilerator : grant gis default select privilege to user tilerator"
  become_user: postgres
  shell: psql -d gis -c 'ALTER DEFAULT PRIVILEGES IN SCHEMA public
   GRANT SELECT ON TABLES TO tilerator;'

# --- #

- name: "tilerator : add osm2pqsql data directory"
  file: path=/srv/data state=directory owner=postgres group=postgres
  
- name: "tilerator : copy osm2pgsql test data"
  copy: src=umbria.pbf dest=/srv/data/

- name: reload systemd
  when: services.changed
  command: systemctl daemon-reload

- name: "tilerator : restart daemon"
  when: services.changed or conf.changed
  service: name=tilerator state=restarted enabled=yes

- name: "tilerator : restart ui"
  when: services.changed or conf.changed
  service: name=tilerator-ui state=restarted enabled=yes

## Kartozoa ##
  
- name: "kartozoa : download"
  git: repo=https://github.com/zoondka/kartozoa.git dest=/srv/kartozoa
  register: src

- name: "kartozoa : update submodules"
  when: src.changed
  shell: git submodule update --init chdir=/srv/kartozoa

- name: "kartozoa : install"
  when: src.changed
  shell: npm install -g --production --no-optional chdir=/srv/kartozoa

- name: "kartozoa : add user"
  user: name=kartozoa createhome=no

- name: "kartozoa : copy service files"
  copy: src=kartozoa/kartozoa.service dest=/etc/systemd/system/
  register: service

- name: "kartozoa : make config dir"
  file: path=/etc/kartozoa state=directory
  
- name: "kartozoa : copy config"
  copy: src=kartozoa/{{ item }} dest=/etc/kartozoa/
  with_items:
    - config.yaml
    - sources.yaml
  register: conf

- name: reload systemd
  when: service.changed
  command: systemctl daemon-reload

# TODO: Maybe enable auto-restart in kartozoa service file, to allow time for cassandra to come online
  
- name: "kartozoa : restart"
  when: service.changed or conf.changed
  service: name=kartozoa state=restarted enabled=yes
